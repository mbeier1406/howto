
#
# Bootloader (GRUB) sichern
#

# Single-User Mode mit Kennwort absichern
Bootloader (GRUB) -> e (edit)
initd-Systeme: "..linux../vmlinuz...<runlevel> # 1, S, s = Single-User Modus
-> /etc/sysconfig/init: SINGLE=/sbin/sulogin
systemd-Systeme: "..linux../vmlinuz...<target> # systemd.unit=rescue.target = Single-User Modus
-> /lib/systemd/system emergency.service rescue.service: ExecStart=.../sbin/sulogin...

# Gegen Aendeungen der Bootkonfiguration beim booten sichern
..linux../vmlinuz...init=/bin/bash # Startet die Bash als Init-Prozess
>> /etc/grub.d/40_custom
set superuser="root"
password root root # bzw. password_pbkdf2 root `grub-mkpasswd-pbkdf2`
# grub-mkconfig -o /boot/grub/grub.cfg # oder update-grub (Ubuntu)


#
# Filesystem Encryption
#

# Frontend LUKS (Linux unified key setup) fuer dm-crypt (device-mapper crypt)
# Erzeugt ein block-device in /dev/mapper
# Physical device (/dev/...) -> dm-crypt -> virtual device (/dev/mapper/...) -> filesystem (zB EXT4) -> files+directory (/...)
sudo shred -v -n1 /dev/<physical disk> # Disk mit Zufallswerten beschreiben
sudo cryptsetup luksFormat /dev/... # verschluesselte Partition initialisieren
sudo cryptsetup luksOpen /dev/... <logical device name zB cdisk1> # Legt in /dev/mapper/cdisk1 das block-device an
sudo mkfs -t <fs-type> /dev/mapper/... # Dateisystem anlegen
sudo mount /dev/mapper/... ...
sudo vi /etc/crypttab # Eintrag notwendig, damit beim Booten das Kennwort abgefragt wird
# Beispiel (kein keyfile=password prompt; option luks=Standardformat der Platte):
# <target name>	<source device>		<key file>	<options>
cdisk1          /dev/sda                none            luks
# Alternativ statt /dev/sda kann die UUID-Syntax gewaehlt werden (sudo blkid /dev/sda)
# Fuer mobile Geraete die ggf. andere Devicenamen nach einem Reboot bekommen
sudo cryptsetup luksClose <logical device> # Nach umount
# Wenn kein blocklevel-Zugriff moeglich ist (cloud), Datei als Filesystem verwenden
sudo fallocate -l <size> <File> # Datei anlegen
sudo strings file.enc # ist leer
sudo if=/dev/urandom of=`pwd`/file.enc bs=1M count=100 # Datei file.enc mit Groesse 100M zufaellig fuellen
sudo cryptsetup luksFormat `pwd`/file.enc # ab hier so wie bei Disks
sudo cryptsetup luksOpen `pwd`/file.enc cfile1
sudo fdisk -l /dev/mapper/cfile1
sudo mkfs ...
sudo mount ...
sudo blkid | grep -i luks # verwendet /dev/loop... als loopback-device, um Dateien wie Block-Devices zu behandeln


#
# Filesystem Security
#

# Kritische Dateianederungen ueberwachen mit AIDE, Tripwire, OSSEC usw.
sudo find / -user root -perm /4000 -ls 2> /dev/null # Alle Programme mit owner root und setuid suchen: suche nach 4777 oder 4775!!!!
sudo find / -perm /2000 -ls 2> /dev/null # Alle Programme mit setgid suchen

# File Attributes (meiste Dateisysteme)
# Nicht ale Atribute sind auf allen Dateisystem verfuegbar
# i=immutable: kein loeschen/aendern/umbenennen/hardlinken
# a=append: nur anhaengen (fuer Sicherheit von Logfiles)
# s=secure deletion: ueberschreibt Dateiinhalte
# Alle definierten Attribute: man chattr
lsattr ...
chattr +/-/=...
sudo chattr +a /var/log/auth.log # Kritisches Logfile gegen Aenderungen des Inhalts sichern

# Access Control Lists ACL
# Fein-granulare Rechtevergabe (z. B. Zugriff auf Datei fuer eine Person, ohne sie der Gruppe zuzuordnen)
# - Typ Access: Zugriffe fuer spezielle Dateien oder Verzeichnisse
# - Typ Default: nur fuer Verzeichnisse nicht rueckwirkend)
# Fuer: Benutzer; Gruppen; Nutzer, die nicht in der Gruppe einer Datei sind; effekive Rechte-Maske
# Dateisystem muss mit ACL-Support gemounet werden:
sudo mount -o acl ... <dev> <path>
sudo tune2fs -o acl <dev>
sudo tune2fs -l <dev> | fgrep -i options # Anzeigen, ob ACL fuer ein Dateisystem aktiv
# ACL (Rule)-Format: [d:]<u/g/o/m/d>:<name>:rwx [default](user/group/others/effectiv-rigths-mask)
$ sudo setfacl -m u:osboxes:rx <Datei> # osboxes Lese- und Ausfuehrungsrecht geben
$ ls -l /opt/cfile1/x.sh
rwxr-x---+ 1 mbeier mbeier 20 Nov 28 14:12 /opt/cfile1/x.sh # osboxes kann ausfuehren (siehe + im Dateistatus)
$ getfacl  /opt/cfile1/x.sh 
getfacl: Removing leading '/' from absolute path names
# file: opt/cfile1/x.sh
# owner: mbeier
# group: mbeier
user::rwx
user:osboxes:r-x		# osboxes kann die Datei ausfuehren
group::r-x
mask::r-x
other::---
$ setfacl -m d:g:lpadmin:rwx /opt/cfile1/mdd	# default ACL fuer das Verzeichnis: lpadmin rwx
$ touch /opt/cfile1/mdd/abc
$ getfacl /opt/cfile1/mdd/abc 			# neue Datei abc erhaelt automatisch Berechtigungen fuer die Gruppe lpadmin
getfacl: Removing leading '/' from absolute path names
# file: opt/cfile1/mdd/abc
# owner: mbeier
# group: mbeier
user::rw-
group::r-x			#effective:r--
group:lpadmin:rwx		#effective:rw-
mask::rw-
other::r--
$ ls -ld /opt/cfile1/mdd
drwxr-xr-x+ 2 mbeier root 4096 Nov 28 14:45 /opt/cfile1/mdd # + zeigt die konfigurierte ACL an


#
# Rootkits
#

# Check Rootkit:
$ sudo apt install chkrootkit
$ zless /usr/share/doc/chkrootkit/README.gz 
# Konfiguration in /etc/chkrootkit/chkrootkit.conf
# Taeglich ausfuehren: /etc/cron.daily/chkrootkit
# Ergebnis in /var/log/chkrootkit/log.today

# Rootkit Hunter:
$ sudo apt install rkhunter -y
$ sudo vi /etc/rkhunter.conf
MIRRORS_MODE=1 -> MIRRORS_MODE=0
UPDATE_MIRRORS=0 -> UPDATE_MIRRORS=1
WEB_CMD="/bin/false" -> WEB_CMD=""
MAIL_CMD=...
MAIL-ON-WARNING=...
ALLOWHIDDENDIR=...	# Wenn erforderlich da gueltige Dateien/Verzeichnisse
ALLOWHIDDENFILE=...
$ sudo vi /var/lib/rkhunter/db/mirrors.dat # Mirrors konfigurieren
$ sudo rkhunter --update # Regelwerk zum Auffinden von Rootkits aktualisieren
$ sudo rkhunter --propupd # Baseline Properties mit dem aktuellen Stand des OS aktualisieren als Vergleichsdatenbank
$ sudo crontab -e # Als Cronjob einrichten
0 0 * * * /usr/local/bin/rkhunter --crontab --update > /path/to/logfile 2>&1
$ sudo rkhunter -c --rwo # Check ausfuehren, nur Warnungen ausgeben (nicht interaktiv)
$ sudo vi /var/log/rkhunter.log # Ergebnis pruefen
... # Beispielwarnung
[14:58:43]   /usr/bin/lwp-request                            [ Warning ]
[14:58:43] Warning: The command '/usr/bin/lwp-request' has been replaced by a script: /usr/bin/lwp-request: Perl script text executable
...
$ dpkg -S /usr/bin/lwp-request # rpm -qf <Datei> bei RHEL
libwww-perl: /usr/bin/lwp-request
$ dpkg -V libwww-perl && echo OK # Paket untersuchen rpm -V bei RHEL
$ sudo vi /etc/rkhunter.conf # Ausnahme eintragen
...
SCRIPTWHITELIST=/usr/bin/lwp-request
...
$ sudo rkhunter --propupd # neie Konfiguration aktualisieren


# OSSEC
# Syscheck Module: user mode rootkits
# Rootcheck Module: kernel und user mode rootkits


#
# Account Security
#

# /etc/login.defs: > UID_MIN User-Accounts, 1..UID_MIN vorgesehen fuer System Accounts, Account Aging, ...
# pwconv/grpconv um Passwortshadowing einzuschalten (Parameter aus /etc/login.defs)
chage -l <Username> um Accountinfos aus /etc/shadow anzuzeigen
# chage um Einstellungen vorzunehmen, d. h. User zwingen, Kennwort zu anedern usw.
# PAM Authentifizierung abstrahiert Nutzerprogramme (login) vom Authentifizierungsprogramm (/etc/passwd, /etc/shadow; fingerprint; ...)
# Konfiguration in /etc/pam.d/... Aufbau: <Modul Interface> <Control Flag> <Module Name> [<Module Args>]
# Modul Interfaces: auth (Authentifizierung), account (Zugriff erlaubt?), password (Passwortrichtlinien), session (User Session Mgt)
# Control Flag: required (sonst Fehlschlag nach kompletter Ausfuehrung alle Module), requisite (wie required aber sofortiger Abbruch),
#               sufficient (wenn kein required fehlgeschlagen sofortiger Erfolg), optional (wenn sonst kein Modul das Interface benutzt),
#               include (Konfiguration aus anderer Datei), [attr=value-Liste] (Complex control flags)
# man <Module Name ohne .so> fuer Infos
# pam_pwquality fuer Passwortqualitaet konfigurieren in /etc/security/pwquality.conf
# pam_pwhistory fuer Kennworthistorie auf lokaler Maschine (nicht LDAP, Kerberos usw.)
# pam_nologin   fuer Wartung usw. wenn /etc/nologin oder /var/run/nologin existiert wird der Inhalt angezeigt
# pam_securetty fuer root-Logins von /etc/securetty und /sys/class/tty/console/active bzw. console= Kernel Commandline
#               bei ssh in /etc/ssh/ssh_config: PermitRootLogin no; DenyUsers ... (wirksam machen mit systemctl reload sshd)
passwd -l/-u <account> # Ent-/sperren eines Accounts, oder /usr/sbin/nologin in /etc/passwd verwenden (chsh -s ...nologin <User>)
last # zeigt letzte logins aus /var/log/wtmp an
lastb # zeigt letzte fehlerhafte logins aus /var/log/btmp an
lastlog # Letztes Login anzeigen aus /var/log/lastlog
# Logs in /var/log/syslog, /var/log/auth.log siehe /etc/rsyslog.conf
# Fuer Zwei-Faktor-Authentifizierung: PAM Modul von Google oder DuoSecurity bzw. RSA SecurID fuer Token verwenden
# Nicht mehr benoetigte User/Serviceaccounts
userdel [-r] ...
find / -user <uid> oder -nouser # Dateileichen aufspueren
w # wer ist eingeloggt und welches Programm wird ausgefuehrt
sudo visudo # Syntax Check fuer /etc/sudoers oder -f /etc/sudoers.d/<Name> zB Username
sudo -ll -U <User> # um anzuzeigen, was der User ausfuehren darf
# Log in /var/log/auth.log (siehe /etc/rsyslog.conf)


#
# Network Security
#

systemctl # Aktive Services anzeigen, starten, stoppen, disablen
netstat -nutlp # UDP/TCP, listening sockets, PID/Process
lsof -i # alternativ
nmap <ip> # port scanning
telnet <host> <port> # pruefen, ob Port TCP antwortet
nc -v <host> <port> # alternativ
# xinetd am Besten ausschalten

# SSH:
# ssh-keygen ~/.ssh/id_rsa[.pub], ssh-copy-id ~/.ssh/authorized_keys
# ssh config in /etc/ssh/ssh_config sichern:
# - PubkeyAuthentication yes, PaswordAuthentication no, PermitRootLogin no, Allow/DenyUsers Allow/DenyGroups verwenden
# - AllowTcpForwarding no (s.u.), GatewayPorts no (Verbindungen von aussen zuallesn)
# - Prtocol 2 (sshv2), ListenAdress <host/ip> (einschraenken ueber welche Adresse man sich einloggen kann)
ssh -L <local-port>:<target-ip/host>:<target-port> <remote-ip/host> # TCP forwarding
# Alles von localhost Port 8080 nach Google ueber server1 senden: sudo ssh -L 8080:goolge.com:80 server1
# Forwarding wieder loeschen: sudo ssh -O cancel -L 8080:goolge.com:80 server1
ssh -D <local-port> <remote-ip/host> # gesamten Traffic 8080 ueber Remote Server senden
# Alles von localhost Port 8080 nach Server1: sudo ssh -D 8080 server1
# Reverse Port forwarding: ssh -R <remoteserver-port>:<local-ip/host>:<local-port>


# Linux Firewall:
# Netfilter + IPTables: Table1 -> Chain1 -> Rule1..RuleN .. ChainM -> RuleM1..RuleMX .. TableY ..
# Std. IPTables: Filter (block connections), NAT (NAT konfigurieren), Mangle (IP-Pakete aendern),
#                Raw (connection tracking), Security (fuer SELinux)
# Std. Chains: INPUT, OUTPUT, FORWARD, PRE/POSTROUTING
# Filter: INPUT, OUTPUT, FORWARD
# NAT: INPUT, OUTPUT, PRE/POSTROUTING
# Mangle: INPUT, OUTPUT, FORWARD, PRE/POSTROUTING
# Raw: OUTPUT, PREROUTING
# Security: INPUT, OUTPUT, FORWARD
# Verwendung der Chains:
# - Eingehende Pakete: PREROUTING -> INPUT -> (local system)
# - Weitergeleitete Pakete: PREROUTING -> FORWARD -> POSTROUTING
# - Ausgehende Pakete: (local system) -> OUTPUT -> POSTROUTING
# Ablauf (nur Filter und NAT):
# 1. Eingehendes Paket
# 2. NAT/PREROUTING
# 3. Forwarding? ja -> 4. nein -> 7.
# 4. Filter/FORWARD
# 5. NAT/POSTROUTING
# 6. Ausgehendes Paket / Ende
# 7.Filter/INPUT
# 8. Lokaler Prozess / Ende
# 9. Ausgehendes Paket
# 10. NAT/OUTPUT
# 11. Filter/OUTPUT -> 5.
# Rules:
#   - Match: Proocol, Source/Destination IP/Network, Source/Destination Port, Network Interface
#   - Target: ACCEPT, DROP, REJECT, LOG, RETURN, ...
iptables -t <table> -L # Tabelle <table> anzeigen -t <table> -A <CHAIN>
# Standardverhalten einer Chain setzen mit -P Option
iptables -P INPUT DROP # Alle eingehenden Pakete, die nicht zu einer definierten Regel passen, verwerfen
# Regel (an einer bestimmen Stelle der Chain) Einfuegen: -I [Zeilennummer] <Regel>;  anhaengen: -A <Regel>;
# loeschen -D <Regel oder Zeilennummer>; alle Regeln loeschen-F [CHAIN]
# Rules definieren:
# -s <source>: IP oder Netzwerk
# -d <destination>: IP oder Netzwerk
# -p <protocol>: tcp, udp, icmp, ...
# --dport <port>: Destination Port
# --sport <port>: Source Port
# -j <target>: Chain oder Target
iptables -t <table> -nL # IPTable/Tabelle <table> anzeigen
iptables -A INPUT -s <ip> -j DROP # Tabelle Filter: alle Pakete von <ip> verwerfen (Regel anhaengen)
iptables -A INPUT -s <network> -p tcp --dport 22 -j ACCEPT # Tabelle Filter: eingehende ssh-Verbindung von <network> akzeptieren
iptables -A INPUT -p tcp --dport 22 -j DROP # ssh-Verbindungen von allen anderen Quellen verwerfen
iptables -I INPUT -p tcp --dport 80 -m limit --limit 50/min --limit-burst 200 -m state --state NEW  -j REJECT # Regel einfuegen: DDOS-Atacken blocken
netflter-persistent save # Aenderungen sichern (apt install netflter-persistent)
iptables-save # Aktuelel Tabellen im CLI-Format ausgeben
# Als Frontend kann UFW (Ubuntu) oder Firewalld (Red Had Linux RHEL), GUFW, ...

# TCP Wrappers
# ACL-System, dass fuer einzelne Services gilt
# Service muss mit libwrap.so kompiliert sein
ldd /usr/sbin/sshd  | grep libwrap # Pruefen, ob sshd TCP-Wrapping unterstuetzt
# Konfiguriert in /etc/hosts.allow und /etc/hosts.deny
# Reihenfolge: hosts.allow: Treffer=ok -> hosts.deny: Treffer=block -> ok
# Format: <Service/s> : <Client/s> [: <Action/s>]
# hosts.deny: sshd, imapd : <ip> Zugriff von <ip> fuer sshd und imapd sperren
# hosts.deny: ALL : <ip>, <net> Zugriff von <ip> und <net> fuer alle Services sperren
# hosts.deny: ALL : .example.com Zugriff von allen Hosts aus der Domaen fuer alle Services sperren
# hosts.deny: ALL : <ip-sub-teil>. Zugriff von allen Hosts aus Netz <ip-sub-teil>.* fuer alle Services sperren
# hosts.deny: ALL : <file> Zugriff von allen Hosts in Datei <file> fuer alle Services sperren
# hosts.deny: ALL : ALL EXCEPT ... Zugriff von allen Hosts  ausser ... fuer alle Services sperren
# Action:
# - severity ... zB emerg Log-Message konfigurieren
# - spawn ... zB /usr/bin/wall "... %c" Prozess starten mit Client Information
#             %a/%A client/server Adressen, %d deamn name, ...


#
# Sonstiges
#

# Neustart ueber <CTL>-<ALT>-<DEL> unterdruecken
sudo systemctl mask ctrl-alt-del.target # /lib/systemd/system/ctrl-alt-del.target
sudo systemctl daemon-reload # Benoetigt dann keinen Reboot, um wirksam zu werden


