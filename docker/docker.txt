
# Allgemeines
apt update && apt install -y jq # JSON Formatierung
docker version

# Images
docker image pull <Image:Version> # Z. B. docker image pull alpine für ein Leichtgewichtiges Linux
docker image ls
docker image build # Erzeugen aus Dockerfile; über docker container commit/tag s. u.
docker image history # Layers anzeigen
docker image inspect # Details des Images anzeigen

# Container
docker container run --name <Container-Name> <Image:Version> [<Commandline>] # Z. B. docker container run alpine:latest ls -l
docker conatiner run -it <Linux-Container> /bin/sh
docker container ls [-a] # Bzw. ps [-a] um [auch gestoppte] Container anzuzeigen
docker conatiner start <Container-Id> # Existierenden Container neu starten
docker container exec <Container-Id> <Commandline> # Kommando im laufenden Container ausführen, z. B. einloggen über docker container exec -it <Container-Id> /bin/sh
docker container logs <Container-Name oder -ID> # Für Container im detached Modus (start -d)
docker container rm <Container-Name oder -ID> # Conatiner löschen (-f für detached Container)

# Volumes
docker volume ls
docker volume create --name <Volume-Name> # Erzeugung eines Volumes über Dockerfile bzw. Hostfolder in einen Container einbinden s. u.
docker volume inspect <Volume-Name>


# Beispiel Image erzeugen über commit/tag
docker container run -ti ubuntu /bin/bash
# apt-get update && apt-get install -y figlet
# exit
docker image ls -a
docker container diff <Container-ID>
docker container commit <Container-ID> # Image erzeugen
docker image ls
docker image tag <Image-ID> <Image-Name>
docker container run <Image-Name> figlet "..."

# Beispiel Image erzeugen ber Dockerfile
cat >> index.js
var os = require("os");
var hostname = os.hostname();
console.log("hostname: " + hostname);
^D
cat >> Dockerfile
FROM alpine
RUN apk update && apk add nodejs
COPY . /app
WORKDIR /app
CMD ["node", "index.js"]
docker image build -t <Image-name>:<Image-Version> .
docker container run <Image-name>:<Image-Version>
docker image history <Image-name>:<Image-Version>
docker inspect --format "{{json .RootFS.Layers}}" history <Image-name>:<Image-Version> | jq

# Beispiel lokale Dateien und Volumes
docker container run --name c1 -ti alpine sh
# mkdir /data && cd /data && touch data.txt
docker container inspect --format "{{json .GraphDriver}}" c1 | jq # Containerverzeichnis
ls -l <UpperDir>/data
docker container rm c1 # Löscht auch das Containerverzeichnis
cat >> Dockerfile
FROM alpine
VOLUME ["/data"]
^D
docker image build -t i2:latest .
docker container run --name c2 -it i2
# cd /data
/data # touch data.txt
/data # ^D
docker container inspect --format "{{json .Mounts}}" c2 | jq
ls -l <Source-Dir> # Inhalt des Volumes anzeigen
docker container stop c2 && docker container rm c2 # Inhalt des Volumes überlebt
docker volume create --name html
docker volume ls
docker volume inspect [--format "{{json .Mountpoint}}"] html
docker container run --name www -d -p 8080:80 -v html:/usr/share/nginx/html nginx # Volume in Container einbinden
ls -l /var/lib/docker/volumes/html/_data # Enthält die von nginx angelegten Dateien
# Hostfolder in Container einbinden, Achtung überschreibt Containerpfade!!!
docker conatiner run -v <existierender Hostpfad>:<evtl. nicht existierener Containerpfad> ... 


# Docker Compose Beispiel
apt update && apt install tree -y && apt install docker-compose -y
git clone https://github.com/ibnesayeed/linkextractor.git && cd linkextractor && git checkout -f step6 && tree
docker-compose up -d --build
docker-compose exec redis redis-cli monitor
curl -i http://localhost:4567/api/http://example.com
curl -i http://localhost:80/?url=http://example.com
docker-compose down
cat logs/extraction.log


# Docker Swarm Mode Beispiel
# (Drei für Quorum) Manager Nodes für Management- und Container-Tasks und in jedem mehrere Worker Nodes (Container-Tasks)
# Tasks (Containers) => Services  => Stack
apt update && apt install tree -y
docker swarm init # Z. B. auf Knoten 1 => Manager
docker swarm leave --force # Beenden
docker swarm join --token <Token aus init> <IP:Port aus init> # Z. B. auf Knoten 2 => Worker
docker node ls # Auf Knoten 1 == Manager
git clone https://github.com/docker/example-voting-app && cd example-voting-app && tree
docker stack deploy --compose-file=docker-stack.yml <Stack-Name>
docker stack ls
docker stack services <Stack-Name>
docker service ps <Service-Name...> # <Stack-Name>_vote, <Stack-Name>_db, ...
# Frontend http://159.69.82.250:5000/ Result http://159.69.82.250:5001/
docker service scale <Service-Name...>=<Anzahl Knoten>

# Docker Networking
docker info # Network Plugins
docker network ls
docker network inspect <Network>
=> bridge:  verfügbar auf localhost = Linux Bridge / virtual switch, per NAT -p extern verfuegbar machen
apt update && apt install bridge-utils
brctl show # zeigt das Docker-Netzwerk, noch kein Container angeschlossen (Spalte interfaces)
ip a # Infos zum Docker Netzwerk
docker run -dt ubuntu:22.04 sleep infinity # Irgendeinen Container starten
brctl show # Jetzt ist ein Container angeschlossen
docker network inspect bridge # Zeigt den Container mit IP-Adresse
ping <IP-Adresse>
=> overlay: Beispiel swarm
host1# docker swarm init; docker node ls # Swarm mit zwei Knoten starten
host2# docker swarm join --token <Token> <IP:Port>
host1# docker network create -d overlay swarmnet
host1# docker network ls # Netzwerk wird angezeigt
host2# docker network ls # Netzwerk wird nicht angezeigt
host1# docker network inspect swarmnet
host1# docker service create --name swarmservcie --network swarmnet --replicas 2 ubuntu sleep infinity
host1# docker service ls && docker service ps swarmservice
host1/2# docker network inspect swarmnet
host1/2# docker ps;
       docker exec -it <Container-ID> /bin/bash; 
       $ apt update && apt install iputils-ping -y
       $ ping <IP> # Adresse aus host2# docker network inspect swarmnet
       $ ping swarmservice # DNS in /etc/resolve.conf
host1# docker service inspect swarmservcie # VirtualIPs == ping swarmservice

